### STRUCTURAL VARIATION ANALYSIS ###

# author: Lorena Derezanin
# date: 5/11/2020
# run in conda env snakemake 
# snakemake v.5.28
# check snakefile status with snakemake --lint
# snakemake -np --use-conda --cores 75 --verbose -s Snakefile1

###################################################################################################################

## mice reads mapped to mice reference genome (Mus_musculus.GRCm38) with BWA
# 150 samples in the cohort (6 lines/populations)
# SV caller: smoove(Lumpy + svtools + CNVnator/CNVpythor)

###################################################################################################################

#### prepare config file with sample IDs and relative paths(from snakefiles) to sample bam files 

# WD="$HOME/sos-fert/20_structural_variants/git/SOS-FERT_SV_analysis"

# # batch1 (remove 10 samples that have been re-sequenced in batch2)
# ls *.bam | awk -F- '{print $1 ": batch1/" $0}' > $WD/config1.yaml

# # batch2 (10 re-seq samples)
# ls *.bam | awk -F. '{print $1 ": batch2/" $0}' > $WD/config2.yaml

# # batch3 (remove sample: I34772-L1_S63_L003)
# ls *.bam | awk -F- '{print $1 ": batch3/" $0}' > $WD/config3.yaml 

# #cat config files
# cat config1.yaml config2.yaml config3.yaml >> config.yaml


#### extract gap regions/low complexity regions in ref. genome

# python generate_masked_ranges.py Mus_musculus.GRCm38.dna.primary_assembly.fa > Mus_musculus.GRCm38_output_ranges.bed


###################################################################################################################

configfile: "config.yaml"

REF="../../../reference_genome_ensembl/Mus_musculus.GRCm38.dna.primary_assembly.fa"
# GFF="../../structural_variant_annotations/Mus_musculus.GRCm38.101.chr.gff3.gz"

rule all:
    input:
      # expand("01_mice_lines_smoove/genotyped/{sample}-smoove.merged.gt.vcf.gz", sample=config["samples"]),
      "01_mice_lines_smoove/pasted/cohort.vcf.gz"



### STRUCTURAL VARIANT CALLING ### 

rule smoove_sv_call:
    input:
      lambda wildcards: config["samples"][wildcards.sample]
    output:
      "01_mice_lines_smoove/results/{sample}-smoove.genotyped.vcf.gz",
      "01_mice_lines_smoove/results/{sample}-smoove.genotyped.vcf.gz.csi",
      "01_mice_lines_smoove/results/{sample}-lumpy-cmd.sh"
    log:
      "logs/smoove/{sample}.sv_call.log"
    params:
      outdir="01_mice_lines_smoove/results",
      bed="Mus_musculus.GRCm38_output_ranges.bed"
    conda:
      "envs/smoove.yml"
    threads: 1
    shell:
      "smoove call --outdir {params.outdir} --exclude {params.bed} --name {wildcards.sample} --fasta {REF} -p {threads} --genotype {input} 2> {log}"

# lumpy-filter removes alignments with low mapq, depth > 1000


# get union of sites across samples 
rule merge:
    input: 
      vcf=expand("01_mice_lines_smoove/results/{sample}-smoove.genotyped.vcf.gz", sample=config["samples"])
    output: 
      "01_mice_lines_smoove/merged/merged.sites.vcf.gz"
    log:
      "logs/smoove/merge.log"
    params:
      outdir="01_mice_lines_smoove/merged",
      name="merged"
    conda:
      "envs/smoove.yml"
    shell:
      "smoove merge --outdir {params.outdir} --name {params.name} --fasta {REF} {input.vcf} 2> {log}"


# genotype each sample at merged sites, run duphold to add depth annotation
rule genotype_merged:
    input:
      merged="01_mice_lines_smoove/merged/merged.sites.vcf.gz",
      bams=lambda wildcards: config["samples"][wildcards.sample]
    output:
      "01_mice_lines_smoove/genotyped/{sample}-joint-smoove.genotyped.vcf.gz"
    log:
      "logs/smoove/{sample}.merged.genotyped.log"
    params:
      outdir="01_mice_lines_smoove/genotyped"
    conda:
      "envs/smoove.yml"
    threads: 1
    shell:
      "smoove genotype -d -x --outdir {params.outdir} --name {wildcards.sample}-joint --fasta {REF} -p {threads} --vcf {input.merged} {input.bams} 2> {log}"        


# paste all the single sample VCFs with the same number of variants
rule paste:
    input:
      vcf=expand("01_mice_lines_smoove/genotyped/{sample}-joint-smoove.genotyped.vcf.gz", sample=config["samples"])
    output:
      "01_mice_lines_smoove/pasted/cohort.vcf.gz"
    log:
      "logs/smoove/paste.log"
    params:
      "cohort"
    conda:
      "envs/smoove.yml"
    shell:
      "smoove paste --name {params} {input.vcf} 2> {log}"



### STRUCTURAL VARIANT ANNOTATION ### 

# download new cache version
rule get_vep_cache:
    output:
        directory("vep_annotation/vep/cache")
    params:
        species="mus_musculus",
        build="GRCm38",
        release="101"
    log:
        "logs/vep/cache.log"
    cache: True  # save space and time with between workflow caching (see docs)
    wrapper:
        "0.67.0/bio/vep/cache"

# download useful plugins
rule get_vep_plugins:
    output:
        directory("vep_annotation/vep/plugins")
    params:
        release=101
    wrapper:
        "0.67.0/bio/vep/plugins"



# # annotate final vcf with VEP
rule vep_annotate:
  input:
        calls="01_mice_lines_smoove/pasted/cohort.vcf.gz",  
        cache="vep_annotation/vep/cache",
        plugins="resources/vep/plugins",
        fasta={REF}
  output:
        calls="mice_variants.vep.annotated.vcf",  
        stats="mice_variants.annotated.html"
  params:
        # Pass a list of plugins to use, see https://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html
        # Plugin args can be added as well, e.g. via an entry "MyPlugin,1,FOO", see docs.
        plugins=["LoFtool"],
        extra="--everything"  # optional: extra arguments
  log:
        "logs/vep/annotate.log"
    threads: 4
    wrapper:
        "0.67.0/bio/vep/annotate"


  rule annotate_variants:
    input:
        calls="variants.bcf",  # .vcf, .vcf.gz or .bcf
        cache="resources/vep/cache",
        plugins="resources/vep/plugins",
        # optionally add reference genome fasta to speed up annotation
        # fasta="genome.fasta",
    output:
        calls="variants.annotated.bcf",  # .vcf, .vcf.gz or .bcf
        stats="variants.html"
    params:
        # Pass a list of plugins to use, see https://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html
        # Plugin args can be added as well, e.g. via an entry "MyPlugin,1,FOO", see docs.
        plugins=["LoFtool"],
        extra="--everything"  # optional: extra arguments
    log:
        "logs/vep/annotate.log"
    threads: 4
    wrapper:
        "0.67.0/bio/vep/annotate"


# # annotate final vcf with SnpEff
# rule snp_eff_annotate:
#   input:
#   output:
#   log:
#   params:
#   wrapper:











