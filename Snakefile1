### STRUCTURAL VARIATION ANALYSIS ###


# author: Lorena Derezanin
# date: 5/11/2020
# run in conda env snakemake 
# snakemake v.5.28
# check snakefile status with snakemake --lint -s Snakefile1
# dry run: snakemake -np --use-conda --cores 75 --verbose -s Snakefile1

###################################################################################################################

## mice reads mapped to mice reference genome (Mus_musculus.GRCm38) with BWA
# 150 samples in the cohort (6 lines/populations)
# SV caller: Smoove (Lumpy + svtools) - population call
#            Manta - individual calls
#            Whamg - individual calls

###################################################################################################################

#### prepare config file with sample IDs and relative paths(from snakefiles) to sample bam files 

# WD="$HOME/sos-fert/20_structural_variants/git/SOS-FERT_SV_analysis"

# # batch1 (remove 10 samples that have been re-sequenced in batch2)
# ls *.bam | awk -F- '{print $1 ": batch1/" $0}' > $WD/config1.yaml

# # batch2 (10 re-seq samples)
# ls *.bam | awk -F. '{print $1 ": batch2/" $0}' > $WD/config2.yaml

# # batch3 (remove sample: I34772-L1_S63_L003)
# ls *.bam | awk -F- '{print $1 ": batch3/" $0}' > $WD/config3.yaml 

# #cat config files (add "samples:")
# cat config1.yaml config2.yaml config3.yaml >> config.yaml


#### extract gap regions/low complexity regions in ref. genome

# python generate_masked_ranges.py Mus_musculus.GRCm38.dna.primary_assembly.fa > Mus_musculus.GRCm38_output_ranges.bed


###################################################################################################################

configfile: "config.yaml"

REF="../../../reference_genome_ensembl/Mus_musculus.GRCm38.dna.primary_assembly.fa"
# GFF="../../structural_variant_annotations/Mus_musculus.GRCm38.101.chr.gff3.gz"

rule all:
    input:
      expand("02_mice_lines_manta/{sample}_manta/runWorkflow.py", sample=config["samples"]),
      expand("02_mice_lines_manta/{sample}_manta/results/variants/diploidSV.vcf.gz", sample=config["samples"]),
      expand("02_mice_lines_manta/{sample}_manta/results/variants/diploidSV.vcf.gz.tbi", sample=config["samples"])
      # "01_mice_lines_smoove/05_annotated/mice_variants.snpeff.annotated.vcf",
      # "01_mice_lines_smoove/05_annotated/mice_variants.snpeff.annotated.html",  
      # "01_mice_lines_smoove/05_annotated/mice_variants.snpeff.annotated.csv",
      # "annotation/snpeff/GRCm38.86" 
      # expand("01_mice_lines_smoove/genotyped/{sample}-smoove.merged.gt.vcf.gz", sample=config["samples"]),
      # "01_mice_lines_smoove/04_pasted/cohort.smoove.square.vcf.gz",
      # "01_mice_lines_smoove/05_annotated/mice_variants.vep.annotated.vcf",  
      # "01_mice_lines_smoove/05_annotated/mice_variants.vep.annotated.html"

    


###################################################################################################################


### STRUCTURAL VARIANT CALLING ### 

# rule smoove_sv_call:
#     input:
#       lambda wildcards: config["samples"][wildcards.sample]
#     output:
#       "01_mice_lines_smoove/01_results/{sample}-smoove.genotyped.vcf.gz",
#       "01_mice_lines_smoove/01_results/{sample}-smoove.genotyped.vcf.gz.csi",
#       "01_mice_lines_smoove/01_results/{sample}-lumpy-cmd.sh"
#     log:
#       "logs/smoove/{sample}.sv_call.log"
#     params:
#       outdir="01_mice_lines_smoove/01_results",
#       bed="Mus_musculus.GRCm38_output_ranges.bed"
#     conda:
#       "envs/smoove.yml"
#     threads: 1
#     shell:
#       "smoove call --outdir {params.outdir} --exclude {params.bed} --name {wildcards.sample} --fasta {REF} -p {threads} --genotype {input} 2> {log}"

# lumpy-filter removes alignments with low mapq, depth > 1000

# prep manta config
rule manta_config:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        "02_mice_lines_manta/{sample}_manta/runWorkflow.py"
    log:
        "logs/manta/{sample}_config.log"
    params:
        rundir="02_mice_lines_manta/{sample}_manta"
    conda:
        "envs/manta.yml"
    shell:
        "configManta.py --bam {wildcards.sample} --referenceFasta {REF} --runDir {params.rundir}"




# manta call
rule manta_sv_call:
    input:
        "02_mice_lines_manta/{sample}_manta/runWorkflow.py"
    output:
        "02_mice_lines_manta/{sample}_manta/results/variants/diploidSV.vcf.gz",
        "02_mice_lines_manta/{sample}_manta/results/variants/diploidSV.vcf.gz.tbi"
    log:
        "logs/manta/{sample}_sv_call.log"
    params:
        GB=100
    threads: 10
    conda:
        "envs/manta.yml"
    shell:
        "python {input} -j {threads} -g {params.GB} 2> {log}"






# # get union of sites across samples 
# rule merge:
#     input: 
#       vcf=expand("01_mice_lines_smoove/01_results/{sample}-smoove.genotyped.vcf.gz", sample=config["samples"])
#     output: 
#       "01_mice_lines_smoove/02_merged/merged.sites.vcf.gz"
#     log:
#       "logs/smoove/merge.log"
#     params:
#       outdir="01_mice_lines_smoove/02_merged",
#       name="merged"
#     conda:
#       "envs/smoove.yml"
#     shell:
#       "smoove merge --outdir {params.outdir} --name {params.name} --fasta {REF} {input.vcf} 2> {log}"


# genotype each sample at merged sites, run duphold to add depth annotation
# rule genotype_merged:
#     input:
#       merged="01_mice_lines_smoove/02_merged/merged.sites.vcf.gz",
#       bams=lambda wildcards: config["samples"][wildcards.sample]
#     output:
#       "01_mice_lines_smoove/03_genotyped/{sample}-joint-smoove.genotyped.vcf.gz"
#     log:
#       "logs/smoove/{sample}.merged.genotyped.log"
#     params:
#       outdir="01_mice_lines_smoove/03_genotyped"
#     conda:
#       "envs/smoove.yml"
#     threads: 1
#     shell:
#       "smoove genotype -d -x --outdir {params.outdir} --name {wildcards.sample}-joint --fasta {REF} -p {threads} --vcf {input.merged} {input.bams} 2> {log}"        



# # paste all the single sample VCFs with the same number of variants
# rule paste:
#     input:
#       vcf=expand("01_mice_lines_smoove/03_genotyped/{sample}-joint-smoove.genotyped.vcf.gz", sample=config["samples"])
#     output:
#       "01_mice_lines_smoove/04_pasted/cohort.smoove.square.vcf"
#     log:
#       "logs/smoove/paste.log"
#     params:
#       "cohort"
#     conda:
#       "envs/smoove.yml"
#     shell:
#       "smoove paste --name {params} {input.vcf} 2> {log}"


