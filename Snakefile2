### STRUCTURAL VARIANT ANNOTATION ### 

# dry run: snakemake -np --use-conda --cores 20 --verbose -s Snakefile2


REF="../../../reference_genome_ensembl/Mus_musculus.GRCm38.dna.primary_assembly.fa"

MICE_LINES=["DU6", "DU6P", "DUC", "DUhLB", "DUK", "FZTDU","FERT"]
SV_TYPE=["DEL", "DUP", "INV", "INS", "TRA"]

rule all:
    input:
      # expand("05_calls_merged_per_line/05_annotated/{mice_line}.vep.annotated.vcf",  mice_line=MICE_LINES),
      # expand("05_calls_merged_per_line/05_annotated/{mice_line}.vep.annotated.html", mice_line=MICE_LINES)
      # "06_all_mice_lines_merged/mice_lines_all.vep.annotated.vcf",
      expand("06_all_mice_lines_merged/{mice_line}_unique_SVs.stats", mice_line=MICE_LINES),
      expand("06_all_mice_lines_merged/{mice_line}_unique_{sv_type}.vcf", mice_line=MICE_LINES, sv_type=SV_TYPE)





# download new vep cache version
rule get_vep_cache:
    output:
      directory("annotation/vep/cache")
    params:
      species="mus_musculus",
      build="GRCm38",
      release="101"
    log:
      "logs/vep/cache.log"
    # cache: True 
    wrapper:
      "0.67.0/bio/vep/cache"


# download vep plugins
rule get_vep_plugins:
    output:
      directory("annotation/vep/plugins")
    log:
      "logs/vep/plugins.log"
    params:
      release=101
    wrapper:
      "0.67.0/bio/vep/plugins"



#### use conda vep instead of the wrapper

rule vep_annotate_conda:
    input:
      calls=expand("05_calls_merged_per_line/03_merged_lines_filtered/{mice_line}_filt.vcf", mice_line="{mice_line}"),
      cache="annotation/vep/cache",
      # plugins="annotation/vep/plugins",
      fasta="../../../reference_genome_ensembl/Mus_musculus.GRCm38.dna.primary_assembly.fa"
    output:
      annotated="05_calls_merged_per_line/05_annotated/{mice_line}.vep.annotated.vcf"
      # stats="05_calls_merged_per_line/05_annotated/{mice_line}.vep.annotated.html"
    params:
      # plugin=["GO"],
      extra="--coding_only --per_gene --gene_phenotype --symbol --protein --sift b --overlaps --max_sv_size 200000000 --force_overwrite" 
    log:
      "logs/vep/{mice_line}.vep.anno.log"
    threads: 4
    conda:
      "envs/vep101.yml"
    shell:
      "vep -i {input.calls} --species mus_musculus --cache --dir_cache {input.cache} --fasta {input.fasta} {params.extra} --o {output.annotated} --stats_text --fork 4 --vcf --format vcf 2> {log}"




# --dir_plugins {input.plugins} 
# {params.plugin}


rule vep_annotate_all_mice_lines:
    input:
      calls="06_all_mice_lines_merged/mice_lines_all.vcf",
      cache="annotation/vep/cache",
      # plugins="annotation/vep/plugins",
      fasta="../../../reference_genome_ensembl/Mus_musculus.GRCm38.dna.primary_assembly.fa"
    output:
      annotated="06_all_mice_lines_merged/mice_lines_all.vep.annotated.vcf"
      # stats="05_calls_merged_per_line/05_annotated/{mice_line}.vep.annotated.html"
    params:
      # plugin=["GO"],
      extra="--coding_only --per_gene --gene_phenotype --symbol --protein --sift b --overlaps --max_sv_size 200000000 --force_overwrite" 
    log:
      "logs/vep/mice_lines_all.vep.anno.log"
    threads: 4
    conda:
      "envs/vep101.yml"
    shell:
      "vep -i {input.calls} --species mus_musculus --cache --dir_cache {input.cache} --fasta {input.fasta} {params.extra} --o {output.annotated} --stats_text --fork 4 --vcf --format vcf 2> {log}"



# subset unique SV call sets per line

# grep -v "^##" mice_lines_all.vep.annotated.vcf | grep -P "^#|SUPP_VEC=100000" > DU6_unique_SVs.vcf

# grep -v "^##" mice_lines_all.vep.annotated.vcf | grep -P "^#|SUPP_VEC=010000" > DU6P_unique_SVs.vcf

# grep -v "^##" mice_lines_all.vep.annotated.vcf | grep -P "^#|SUPP_VEC=001000" > DUC_unique_SVs.vcf

# grep -v "^##" mice_lines_all.vep.annotated.vcf | grep -P "^#|SUPP_VEC=000100" > DUhLB_unique_SVs.vcf

# grep -v "^##" mice_lines_all.vep.annotated.vcf | grep -P "^#|SUPP_VEC=000010" > DUK_unique_SVs.vcf

# grep -v "^##" mice_lines_all.vep.annotated.vcf | grep -P "^#|SUPP_VEC=000001" > FZTDU_unique_SVs.vcf

# subset shared SVs in fertility lines DUK and DUC
# grep -v "^##" mice_lines_all.vep.annotated.vcf | grep -P "^#|SUPP_VEC=001010" > FERT_unique_SVs.vcf


# run stats on each unique SV call set 

rule unique_SVs_per_line_stats:
  input:
    expand("06_all_mice_lines_merged/{mice_line}_unique_SVs.vcf", mice_line="{mice_line}")
  output:
    "06_all_mice_lines_merged/{mice_line}_unique_SVs.stats"
  log:
    "logs/vep/{mice_line}_uniqueSVs.log"
  params:
    "50 -1 -1"
  conda:
    "envs/survivor.yml"
  shell:
    "SURVIVOR stats {input} {params} {output} 2> {log}"


rule grep_SV_types_from_each_line:
  input:
    expand("06_all_mice_lines_merged/{mice_line}_unique_SVs.vcf", mice_line="{mice_line}")
  output:
    "06_all_mice_lines_merged/{mice_line}_unique_{sv_type}.vcf"
  log:
    "log/unique_svs/{mice_line}_unique{sv_type}.log"
  params:
    sv_type="{sv_type}"
  shell:
    "grep -v '^#' {input} | grep 'SVTYPE={params.sv_type}' > {output} 2> {log}"



# grep -v "^#" mustelids_lumpy_manta_wham_noNs.vcf | grep "SVTYPE=DEL" > all_species_DEL.vcf
# grep -v "^#" mustelids_lumpy_manta_wham_noNs.vcf | grep "SVTYPE=DUP" > all_species_DUP.vcf
# grep -v "^#" mustelids_lumpy_manta_wham_noNs.vcf | grep "SVTYPE=INV" > all_species_INV.vcf
# grep -v "^#" mustelids_lumpy_manta_wham_noNs.vcf | grep "SVTYPE=INS" > all_species_INS.vcf
# grep -v "^#" mustelids_lumpy_manta_wham_noNs.vcf | grep "SVTYPE=TRA" > all_species_TRA.vcf



# get SV lengths
# get percentages of each SV type in total SVs








  # vep \
  # -i 05_calls_merged_per_line/03_merged_lines_filtered/DU6_filt.vcf \
  # --species mus_musculus \
  # --cache --dir_cache $DIR_CACHE \
  # --sf DU6_variants.vep_summary.html \
  # --dir 05_calls_merged_per_line/05_annotated_conda \
  # --fasta $REF \
  # --o DU6_variants.vep.annotated.vcf \
  # --offline \
  # --vcf \
  # --fork 4 \
  # --format vcf \
  # --symbol \
  # --protein \
  # --sift b \
  # --gene_phenotype \
  # --per_gene \
  # --coding_only \
  # --overlaps \
  # --max_sv_size 200000000 \
  # --force_overwrite 2> DU6_vep.anno.log



# "Phenotypes,file=annotation/vep/phenotypes.gff.gz,include_types=Gene"],


# # download snpeff ref db
# rule get_snpeff_db:
#     output:
#         directory("annotation/snpeff/GRCm38.86")
#     log:
#         "logs/snpeff/snpEff_GRCm38.86_download.log"
#     params:
#         reference="GRCm38.86"
#     wrapper:
#         "0.67.0/bio/snpeff/download"


# # annotate final vcf with SnpEff
# rule snpeff_annotate:
#     input:
#         calls="01_mice_lines_smoove/04_pasted/cohort.smoove.square.vcf", 
#         db="annotation/snpeff/GRCm38.86" 
#     output:
#         calls="01_mice_lines_smoove/annotated/mice_variants.snpeff.annotated.vcf",   
#         stats="01_mice_lines_smoove/annotated/mice_variants.snpeff.annotated.html",  
#         csvstats="01_mice_lines_smoove/annotated/mice_variants.snpeff.annotated.csv" 
#     log:
#         "logs/snpeff/annotate.log"
#     params:
#         extra="-Xmx4g"         
#     wrapper:
#         "0.67.0/bio/snpeff/annotate"





